# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.2.2
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: "3.3"
x-airflow-common:
    # In order to add custom dependencies or upgrade provider packages you can use your extended image.
    # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
    # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
    &airflow-common
    image: ${AIRFLOW_IMAGE_NAME:-zetsubou-dev/airflow:2.2.3-python3.8}
    # build: .
    network_mode: host
    environment: &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@localhost:5431/airflow
        AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@localhost:5431/airflow
        AIRFLOW__CELERY__BROKER_URL: redis://localhost:6379/0
        AIRFLOW__CORE__FERNET_KEY: ""
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
        AIRFLOW__CORE__LOAD_EXAMPLES: "false"
        AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
        _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
        ZETSUBOU_APP_ADMIN_EMAIL: ${ZETSUBOU_APP_ADMIN_EMAIL:-null}
        ZETSUBOU_APP_ADMIN_NAME: ${ZETSUBOU_APP_ADMIN_NAME:-null}
        ZETSUBOU_APP_ADMIN_PASSWORD: ${ZETSUBOU_APP_ADMIN_PASSWORD:-null}
        ZETSUBOU_APP_DOCS_REDOC_JS_URL: ${ZETSUBOU_APP_DOCS_REDOC_JS_URL:-https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js}
        ZETSUBOU_APP_DOCS_SWAGGER_CSS_URL: ${ZETSUBOU_APP_DOCS_SWAGGER_CSS_URL:-https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css}
        ZETSUBOU_APP_DOCS_SWAGGER_JS_URL: ${ZETSUBOU_APP_DOCS_SWAGGER_JS_URL:-https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js}
        ZETSUBOU_APP_FAVICON: ${ZETSUBOU_APP_FAVICON:-/favicon.ico}
        ZETSUBOU_APP_FRONT: ${ZETSUBOU_APP_FRONT:-./front/dist}
        ZETSUBOU_APP_HOST: ${ZETSUBOU_APP_HOST:-0.0.0.0}
        ZETSUBOU_APP_MODE: ${ZETSUBOU_APP_MODE:-STANDALONE}
        ZETSUBOU_APP_PORT: ${ZETSUBOU_APP_PORT:-3000}
        ZETSUBOU_APP_SECURITY_ALGORITHM: ${ZETSUBOU_APP_SECURITY_ALGORITHM:-HS256}
        ZETSUBOU_APP_SECURITY_EXPIRED: ${ZETSUBOU_APP_SECURITY_EXPIRED:-100}
        ZETSUBOU_APP_SECURITY_SECRET: ${ZETSUBOU_APP_SECURITY_SECRET:-VadwSj8umrbeG8ro}
        ZETSUBOU_APP_STATICS: ${ZETSUBOU_APP_STATICS:-./statics}
        ZETSUBOU_APP_TITLE: ${ZETSUBOU_APP_TITLE:-ZetsuBou}
        ZETSUBOU_APP_USER_AUTO_PLAY_TIME_INTERVAL: ${ZETSUBOU_APP_USER_AUTO_PLAY_TIME_INTERVAL:-5}
        ZETSUBOU_APP_USER_GALLERY_PREVIEW_SIZE: ${ZETSUBOU_APP_USER_GALLERY_PREVIEW_SIZE:-40}
        ZETSUBOU_APP_USER_IMG_PREVIEW_SIZE: ${ZETSUBOU_APP_USER_IMG_PREVIEW_SIZE:-40}
        ZETSUBOU_DATABASE_TYPE: ${ZETSUBOU_DATABASE_TYPE:-sqlite}
        ZETSUBOU_DATABASE_URL: ${ZETSUBOU_DATABASE_URL:-sqlite+aiosqlite:///zetsubou.db?check_same_thread=False}
        ZETSUBOU_ELASTIC_INDEX_GALLERY: ${ZETSUBOU_ELASTIC_INDEX_GALLERY:-zetsubou-gallery}
        ZETSUBOU_ELASTIC_INDEX_TAG: ${ZETSUBOU_ELASTIC_INDEX_TAG:-zetsubou-tag}
        ZETSUBOU_ELASTIC_SIZE: ${ZETSUBOU_ELASTIC_SIZE:-40}
        ZETSUBOU_ELASTIC_URLS: ${ZETSUBOU_ELASTIC_URLS:-}
        ZETSUBOU_GALLERY_AUTOCOMPLETE_FNAME: ${ZETSUBOU_GALLERY_AUTOCOMPLETE_FNAME:-autocomplete.yml}
        ZETSUBOU_GALLERY_BACKUP_COUNT: ${ZETSUBOU_GALLERY_BACKUP_COUNT:-3}
        ZETSUBOU_GALLERY_DIR_FNAME: ${ZETSUBOU_GALLERY_DIR_FNAME:-.tag}
        ZETSUBOU_GALLERY_IMGS_FNAME: ${ZETSUBOU_GALLERY_IMGS_FNAME:-imgs.json}
        ZETSUBOU_GALLERY_TAG_FNAME: ${ZETSUBOU_GALLERY_TAG_FNAME:-gallery.json}
        ZETSUBOU_MINIO_ENDPOINT: ${ZETSUBOU_MINIO_ENDPOINT:-null}
        ZETSUBOU_MINIO_EXPIRES_IN_MINUTES: ${ZETSUBOU_MINIO_EXPIRES_IN_MINUTES:-10080}
        ZETSUBOU_MINIO_IS_SECURE: ${ZETSUBOU_MINIO_IS_SECURE:-false}
        ZETSUBOU_MINIO_PASSWORD: ${ZETSUBOU_MINIO_PASSWORD:-null}
        ZETSUBOU_MINIO_USER: ${ZETSUBOU_MINIO_USER:-null}
        ZETSUBOU_STANDALONE_HOST: ${ZETSUBOU_STANDALONE_HOST:-0.0.0.0}
        ZETSUBOU_STANDALONE_PORT: ${ZETSUBOU_STANDALONE_PORT:-3001}
        ZETSUBOU_STANDALONE_SECURE: ${ZETSUBOU_STANDALONE_SECURE:-false}
    volumes:
        - ${AIRFLOW_ZETSUBOU_VOLUME:-./}:/opt/airflow/zetsubou
        - ${AIRFLOW_DOWNLOAD_VOLUME:-./dev/airflow/download}:/opt/airflow/download
        - ${AIRFLOW_DAGS_VOLUME:-./dags}:/opt/airflow/dags
        - ${AIRFLOW_LOGS_VOLUME:-./dev/volumes/airflow/logs}:/opt/airflow/logs
        - ${AIRFLOW_PLUGINS_VOLUME:-./dev/volumes/airflow/plugins}:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on: &airflow-common-depends-on
        airflow-redis:
            condition: service_healthy
        airflow-postgres:
            condition: service_healthy

services:
    zetsubou-app:
        image: zetsubou-dev/app:${ZETSUBOU_APP_VERSION:-latest}
        container_name: zetsubou-app
        stdin_open: true
        tty: true
        command: dockerize -wait tcp://localhost:9200 python app.py
        network_mode: host
        expose:
            - 3000
        depends_on:
            - zetsubou-elastic
    zetsubou-postgres:
        image: postgres:13
        environment:
            POSTGRES_USER: zetsubou
            POSTGRES_PASSWORD: zetsubou
            POSTGRES_DB: zetsubou
        ports:
            - 5430:5432
        volumes:
            - ${ZETSUBOU_POSTGRES_DB_VOLUME:-./dev/volumes/postgres}:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "zetsubou"]
            interval: 5s
            retries: 5
        restart: always
    zetsubou-elastic:
        image: elasticsearch:7.10.1
        network_mode: host
        expose:
            - 9200
        environment:
            - USER_UID=1000
            - USER_GID=1000
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        volumes:
            - ${ZETSUBOU_ELASTICSEARCH_VOLUME:-./dev/volumes/elasticsearch}:/usr/share/elasticsearch/data
    zetsubou-minio:
        image: quay.io/minio/minio
        command: server /data --console-address ":9001"
        network_mode: host
        expose:
            - 9000
            - 9001
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-wJalrXUtnFEMI}
        volumes:
            # - postgres_data:/var/lib/postgresql/data
            - ${MINIO_VOLUME:-./dev/volumes/minio}:/data
    airflow-postgres:
        image: postgres:13
        environment:
            POSTGRES_USER: airflow
            POSTGRES_PASSWORD: airflow
            POSTGRES_DB: airflow
        ports:
            - 5431:5432
        volumes:
            - ${AIRFLOW_POSTGRES_DB_VOLUME:-./dev/volumes/airflow/postgres}:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        restart: always

    airflow-redis:
        image: redis:latest
        network_mode: host
        expose:
            - 6379
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 30s
            retries: 50
        restart: always

    airflow-webserver:
        <<: *airflow-common
        command: webserver
        expose:
            - 8080
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully

    airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully

    airflow-worker:
        <<: *airflow-common
        command: celery worker
        healthcheck:
            test:
                - "CMD-SHELL"
                - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
            interval: 10s
            timeout: 10s
            retries: 5
        environment:
            <<: *airflow-common-env
            # Required to handle warm shutdown of the celery workers properly
            # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
            DUMB_INIT_SETSID: "0"
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully

    airflow-triggerer:
        <<: *airflow-common
        command: triggerer
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully

    airflow-init:
        <<: *airflow-common
        entrypoint: /bin/bash
        # yamllint disable rule:line-length
        command:
            - -c
            - |
                function ver() {
                  printf "%04d%04d%04d%04d" $${1//./ }
                }
                airflow_version=$$(gosu airflow airflow version)
                airflow_version_comparable=$$(ver $${airflow_version})
                min_airflow_version=2.2.0
                min_airflow_version_comparable=$$(ver $${min_airflow_version})
                if (( airflow_version_comparable < min_airflow_version_comparable )); then
                  echo
                  echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
                  echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
                  echo
                  exit 1
                fi
                if [[ -z "${AIRFLOW_UID}" ]]; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
                  echo "If you are on Linux, you SHOULD follow the instructions below to set "
                  echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
                  echo "For other operating systems you can get rid of the warning with manually created .env file:"
                  echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
                  echo
                fi
                one_meg=1048576
                mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
                cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
                disk_available=$$(df / | tail -1 | awk '{print $$4}')
                warning_resources="false"
                if (( mem_available < 4000 )) ; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
                  echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
                  echo
                  warning_resources="true"
                fi
                if (( cpus_available < 2 )); then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
                  echo "At least 2 CPUs recommended. You have $${cpus_available}"
                  echo
                  warning_resources="true"
                fi
                if (( disk_available < one_meg * 10 )); then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
                  echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
                  echo
                  warning_resources="true"
                fi
                if [[ $${warning_resources} == "true" ]]; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
                  echo "Please follow the instructions to increase amount of resources available:"
                  echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
                  echo
                fi
                mkdir -p /sources/logs /sources/dags /sources/plugins
                chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
                exec /entrypoint airflow version
        # yamllint enable rule:line-length
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_UPGRADE: "true"
            _AIRFLOW_WWW_USER_CREATE: "true"
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        user: "0:0"
        volumes:
            - .:/sources

    airflow-cli:
        <<: *airflow-common
        profiles:
            - debug
        environment:
            <<: *airflow-common-env
            CONNECTION_CHECK_MAX_COUNT: "0"
        # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
        command:
            - bash
            - -c
            - airflow

    flower:
        <<: *airflow-common
        command: celery flower
        expose:
            - 5555
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
